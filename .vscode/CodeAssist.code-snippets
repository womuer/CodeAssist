{
    "for": {
        "prefix": "for",
        "body": [
            "for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
            "{",
			"	$3",
            "}"
        ],
        "description": "Code snippet for 'for' loop"
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
            "{",
			"	$3",
            "}"
        ],
        "description": "Code snippet for reverse 'for' loop"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ($1)",
            "{",
			"	$2",
            "}"
        ],
        "description": ""
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ($1)",
            "{",
			"	$2",
            "}"
        ],
        "description": "Code snippet for if statement"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else",
            "{",
			"	$1",
            "}"
        ],
        "description": "Code snippet for else statement"
    },
    "else if": {
        "prefix": "else if",
        "body": [
            "else if ($1)",
            "{",
			"	$2",
            "}"
        ],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "enum ${MyEnum}",
            "{",
			"	$1",
            "};"
        ],
        "description": "Code snippet for enum"
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": [
            "#ifdef ${DEBUG}",
            "$1",
            "#endif // ${DEBUG}"
        ],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": [
            "#ifndef ${1:1}",
            "$2",
            "#endif // !$1"
        ],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": [
            "#ifdef ${1:0}",
            "$2",
            "#endif // $1"
        ],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "struct ${MyStruct}",
            "{",
			"	$1",
            "};"
        ],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${switch_on})",
            "{",
            "default:",
			"	break;$1",
            "}"
        ],
        "description": "Code snippet for switch statement"
    },
    "union": {
        "prefix": "union",
        "body": [
            "union ${MyUnion}",
            "{",
			"	$1",
            "};"
        ],
        "description": "Code snippet for union"
    },
    "#inc": {
        "prefix": "#inc",
        "body": [
            "#include \"$1\""
        ],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": [
            "#include <$1>"
        ],
        "description": "Code snippet for #include \" \""
    },
    "#def": {
        "prefix": "#def",
        "body": [
            "#define \"$1\" \"$2\" "
        ],
        "description": "Code snippet for #define \" \""
    },
    "#def": {
        "prefix": "#def",
        "body": [
            "#define \"$1\" \"$2\" "
        ],
        "description": "Code snippet for #define \" \""
    },
    "bubblesort": {
        "prefix": "arrBubblesort",
        "body": [
            "// 冒泡排序函数",
            "void bubbleSort(int arr[], int n) {",
            "    int temp;",
            "    int swapped;",
            "",
            "    for (int i = 0; i < n - 1; i++) {",
            "        swapped = 0; // 用于标记是否发生了交换",
            "",
            "        for (int j = 0; j < n - i - 1; j++) {",
            "            if (arr[j] > arr[j + 1]) {",
            "                // 交换arr[j]和arr[j+1]的位置",
            "                temp = arr[j];",
            "                arr[j] = arr[j + 1];",
            "                arr[j + 1] = temp;",
            "                swapped = 1; // 标记已发生交换",
            "            }",
            "        }",
            "",
            "        // 如果在本轮没有发生交换，说明数组已经有序，可以提前退出",
            "        if (swapped == 0) {",
            "            break;",
            "        }",
            "    }",
            "}"
        ],
        "description": "Code snippet forbubblesort \" \""
    },
    "bubblesort_cn": {
        "prefix": "数组冒泡排序",
        "body": [
            "// 冒泡排序函数",
            "void bubbleSort(int arr[], int n) {",
            "    int temp;",
            "    int swapped;",
            "",
            "    for (int i = 0; i < n - 1; i++) {",
            "        swapped = 0; // 用于标记是否发生了交换",
            "",
            "        for (int j = 0; j < n - i - 1; j++) {",
            "            if (arr[j] > arr[j + 1]) {",
            "                // 交换arr[j]和arr[j+1]的位置",
            "                temp = arr[j];",
            "                arr[j] = arr[j + 1];",
            "                arr[j + 1] = temp;",
            "                swapped = 1; // 标记已发生交换",
            "            }",
            "        }",
            "",
            "        // 如果在本轮没有发生交换，说明数组已经有序，可以提前退出",
            "        if (swapped == 0) {",
            "            break;",
            "        }",
            "    }",
            "}"
        ],
        "description": "Code snippet forbubblesort \" \""
    },
    "find_min_arr": {
        "prefix": "arrFindminarr",
        "body": [
            "int findMin(int arr[], int n) {",
            "    if (n <= 0) {",
            "        // 处理无效输入",
            "        printf("error");",
            "        return -1; // 返回一个标志值表示错误",
            "    }",
            "",
            "    int min = arr[0]; // 假定第一个元素为最小值",
            "",
            "    // 遍历数组，比较找到最小值",
            "    for (int i = 1; i < n; i++) {",
            "        if (arr[i] < min) {",
            "            min = arr[i]; // 更新最小值",
            "        }",
            "    }",
            "",
            "    return min;",
            "}"
        ],
        "description": "Code snippet for findminarr"
    },
    "find_min_arr_cn": {
        "prefix": "数组查找数组最小值",
        "body": [
            "int findMin(int arr[], int n) {",
            "    if (n <= 0) {",
            "        // 处理无效输入",
            "        printf("error");",
            "        return -1; // 返回一个标志值表示错误",
            "    }",
            "",
            "    int min = arr[0]; // 假定第一个元素为最小值",
            "",
            "    // 遍历数组，比较找到最小值",
            "    for (int i = 1; i < n; i++) {",
            "        if (arr[i] < min) {",
            "            min = arr[i]; // 更新最小值",
            "        }",
            "    }",
            "",
            "    return min;",
            "}"
        ],
        "description": "Code snippet for 查找数组最小值"
    },
    "selectionSort": {
        "prefix": "arrSelectionSort",
        "body": [
            "// 选择排序函数",
            "void selectionSort(int arr[], int n) {",
            "    int i, j, minIndex, temp;",
            "    ",
            "    for (i = 0; i < n - 1; i++) {",
            "        minIndex = i; // 假定未排序部分的第一个元素是最小的",
            "        for (j = i + 1; j < n; j++) {",
            "            // 寻找未排序部分中的最小元素的索引",
            "            if (arr[j] < arr[minIndex]) {",
            "                minIndex = j;",
            "            }",
            "        }",
            "",
            "        // 交换未排序部分的第一个元素和最小元素",
            "        temp = arr[i];",
            "        arr[i] = arr[minIndex];",
            "        arr[minIndex] = temp;",
            "    }",
            "}"
        ],
        "description": "Code snippet for selectionSort"
    },
    "selectionSortCn": {
        "prefix": "数组选择排序",
        "body": [
            "// 选择排序函数",
            "void selectionSort(int arr[], int n) {",
            "    int i, j, minIndex, temp;",
            "    ",
            "    for (i = 0; i < n - 1; i++) {",
            "        minIndex = i; // 假定未排序部分的第一个元素是最小的",
            "        for (j = i + 1; j < n; j++) {",
            "            // 寻找未排序部分中的最小元素的索引",
            "            if (arr[j] < arr[minIndex]) {",
            "                minIndex = j;",
            "            }",
            "        }",
            "",
            "        // 交换未排序部分的第一个元素和最小元素",
            "        temp = arr[i];",
            "        arr[i] = arr[minIndex];",
            "        arr[minIndex] = temp;",
            "    }",
            "}"
        ],
        "description": "Code snippet for selectionSort"
    },
    "quickSort": {
        "prefix": "arrQuickSort",
        "body": [
            "// 交换数组中两个元素的值",
            "void swap(int *a, int *b) {",
            "    int temp = *a;",
            "    *a = *b;",
            "    *b = temp;",
            "}",
            "",
            "// 分割数组，并返回分割点的索引",
            "int partition(int arr[], int low, int high) {",
            "    int pivot = arr[high]; // 选择最后一个元素作为枢纽元素",
            "    int i = low - 1; // 初始化较小元素的索引",
            "",
            "    for (int j = low; j <= high - 1; j++) {",
            "        if (arr[j] <= pivot) {",
            "            i++; // 较小元素的索引增加",
            "            swap(&arr[i], &arr[j]);",
            "        }",
            "    }",
            "",
            "    swap(&arr[i + 1], &arr[high]);",
            "    return i + 1;",
            "}",
            "",
            "// 快速排序函数",
            "void quickSort(int arr[], int low, int high) {",
            "    if (low < high) {",
            "        // 找到分割点的索引",
            "        int pi = partition(arr, low, high);",
            "",
            "        // 递归对分割点左边和右边的子数组进行排序",
            "        quickSort(arr, low, pi - 1);",
            "        quickSort(arr, pi + 1, high);",
            "    }",
            "}"
        ],
        "description": "Code snippet for quickSort"
    },
    "quickSortCn": {
        "prefix": "数组快速排序",
        "body": [
            "// 交换数组中两个元素的值",
            "void swap(int *a, int *b) {",
            "    int temp = *a;",
            "    *a = *b;",
            "    *b = temp;",
            "}",
            "",
            "// 分割数组，并返回分割点的索引",
            "int partition(int arr[], int low, int high) {",
            "    int pivot = arr[high]; // 选择最后一个元素作为枢纽元素",
            "    int i = low - 1; // 初始化较小元素的索引",
            "",
            "    for (int j = low; j <= high - 1; j++) {",
            "        if (arr[j] <= pivot) {",
            "            i++; // 较小元素的索引增加",
            "            swap(&arr[i], &arr[j]);",
            "        }",
            "    }",
            "",
            "    swap(&arr[i + 1], &arr[high]);",
            "    return i + 1;",
            "}",
            "",
            "// 快速排序函数",
            "void quickSort(int arr[], int low, int high) {",
            "    if (low < high) {",
            "        // 找到分割点的索引",
            "        int pi = partition(arr, low, high);",
            "",
            "        // 递归对分割点左边和右边的子数组进行排序",
            "        quickSort(arr, low, pi - 1);",
            "        quickSort(arr, pi + 1, high);",
            "    }",
            "}"
        ],
        "description": "Code snippet for quickSortCn"
    },
    "arrfindDuplicates": {
        "prefix": "arrfindDuplicates",
        "body": [
            "void findDuplicates(int arr[], int n) {",
            "    int i, j;",
            "    printf("重复元素：\n");",
            "    ",
            "    for (i = 0; i < n - 1; i++) {",
            "        for (j = i + 1; j < n; j++) {",
            "            if (arr[i] == arr[j]) {",
            "                printf("%d\n", arr[i]);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Code snippet for arrfindDuplicates"
    },
    "arrfindDuplicatesCn": {
        "prefix": "数组查找重复元素",
        "body": [
            "void findDuplicates(int arr[], int n) {",
            "    int i, j;",
            "    printf("重复元素：\n");",
            "    ",
            "    for (i = 0; i < n - 1; i++) {",
            "        for (j = i + 1; j < n; j++) {",
            "            if (arr[i] == arr[j]) {",
            "                printf("%d\n", arr[i]);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Code snippet for arrfindDuplicatesCn"
    },
    "xx": {
        "prefix": "expamle",
        "body": [
            "expamle ${expamle}"
        ],
        "description": "Code snippet for expamle"
    },
}